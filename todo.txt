2018-11-16
    CONTINUE:
        1. Split ProcessedPeer to ProcessedPeer and ProcessedPeerData
        2. Flat directory structure of Reporters => move async_actions under concrete reporter node, i.e.
           elena.async_actions, rouge_async_actions.
        3. Cleaning a mess with resolving a paths for peers/models/topics (should be cleaned from Elena's Metrics)
        4. Multithreading for Elena's metric should be added
        5. Changing data object to be as much as possible immutable.
           --== Immutability should be a part of design of passing among the threads ==--
        6. Move common logic for mapping object to Map, CSV String, etc.
    Done:
        1. ProcessedPeer to hold all related data for peer
        2. Template for peer processing (@see AbstractPeerReporter). (don't like it as it's built on top inheritance...
           will be looking for better solution if there will be a time for that)
    TODO:
        1. Implementing AutoSummENG. + Write reporter for AutoSummENG.
        2. Add missing libraries with .bat file to load them into local Maven repository
        3. Remove MainAlgo! Should be part of container. Design become over-engineered with this to be a separate part.
        4. Add GUI to project. Will be simple SWING. WebUI will wait till better times :-)
        5. Start writing a Project Document.
        6. Reducers should write in the same directory...
        7. Reducer to generate(!) one gigantus table?..
        8. Clean tests not to have absolute file paths. (=> need to upload test data)

2018-11-14
    CONTINUE:
        1. Cleaning a mess with resolving a paths for peers/models/topics (should be cleaned from Elena's Metrics)
        2. Multithreading for Elena's metric should be added
        3. Changing data object to be as much as possible immutable.
           --== Immutability should be a part of design of passing among the threads ==--
        4. Move common logic for mapping object to Map, CSV String, etc.
    Done:
        1. FileSystemTopology finished
        2. First success of running PeerMultimodelReporter within Multithreading.
        3. Model of global ThreadPool similar to NodeJS.
    TODO:
        1. Implementing AutoSummENG. + Write reporter for AutoSummENG.
        2. Add missing libraries with .bat file to load them into local Maven repository
        3. Remove MainAlgo! Should be part of container. Design become over-engineered with this to be a separate part.
        4. Add GUI to project. Will be simple SWING. WebUI will wait till better times :-)
        5. Start writing a Project Document.
        6. Reducers should write in the same directory...
        7. Reducer for one gigantus table?..
        8. Clean tests not to have absolute file paths. (=> need to upload test data)

2018-11-11
    CONTINUE:
        1. Cleaning a mess with resolving a paths for peers/models/topics
        2. Implementing AutoSummENG.
    Done:
        1. Reorganizing packages for tests
        2. Started writing FileSystemTopology that will aggregate the logic
           for resolving a paths for peers/models/topics
    TODO:
        1  Finish FileSystemTopology
        2. Write reported for AutoSummENG.
        3. Add reporter to main starter and containers
        4. !!Multithreading should be added!!

2018-11-10--001
    CONTINUE:
        1. Implementing AutoSummENG.
        2. Overall small refactoring tasks
    Done:
        1. [Multithreading preparations] headerCreated class member removed from reporters
           to allow multithreaded execution
        2. DocumentDesc class is added as a way for not having processors holding an information which related only
           to texts. For instance, AutoSummENG graph calculation depends on passed parameters. So, it is aggregated in
           DocumentDesc and the Text<DocumentDesc> and not in the Processor
        3. [Multithreading preparations] ScoreCalculator changed so that it gets now texts
           as function parameters and not from object members
    TODO:
        1. Write reported for AutoSummENG.
        2. Add reporter to main starter and containers
        3. !!Multithreading should be added!!

2018-11-09
    CONTINUE:
        Implementing AutoSummENG.
    Done:
        1. AutoSummENG partially implemented with Text<> and Caching in AutoSummENGTextProcessorTest
        2. Big redesign of project structure (Look 2018-10-23 Todo list, Item #2)
           a. Concrete Metrics now live in dedicated package
           b. Core package was cleaned up
           c. Starters and Containers are live in separate package
           d. Old ideas are deleted
        3. Merged to master
        4. TextProcessor cache is cleaner up
    TODO:
        1. Write reported for AutoSummENG.
        2. Add reporter to main starter and containers

2018-11-08
    CONTINUE:
        Implementing AutoSummENG.
    Done:
        1. Pruned wrong direction of "George metrics" (still exists in the code)
        2. Added a test that shows how to compute AutoSummENG metrics
    TODO:
        1. Implement AutoSummENG with Text<> and Caching.

2018-10-25
    CONTINUE:
        Implementing George metrics
    Done:
        1. TF-IDF will be calculated from topics.
        2.
    TODO:
        1. Refactor code copy-paste among Reporters which finds systems/peers/topics etc. Need to do it in more general
           maner.

2018-10-24
    CONTINUE:
        Implementing George metrics
    Done:
        1. More or less structure of sep-config.json to support george metrics. The huge problem with his metrics that
           it just calculates the cross product between the documents. It is ok... but it is not good for the SEP
        2. Some tests are done to retrieve parsed document within Open Calais.

2018-10-23
    CONTINUE:
        Implementing George metrics
    Done:
        1. Started implementing George metrics within Text and TextProcessor.
    TODO:
        1. See the last one (2018-10-16)
        2. The project should be cleaned. It is salad in the names of packages:
            a. il.ac.sce.ir.metric.core.config should be cleared
            b. Need to clean very old ideas how the project should look like
            c. Need to move il.ac.sce.ir.metric.core.processor.token_filter being not under the core
        3. GUI with react will be too complicated?.. Looks like some simpler solution should be done.


2018-10-16
    Done:
        1. GUI initiated as Empty React Project
        2. Temp data is added to git repo
    TODO:
        1. Understand where I am staying. (!!!very important!!!)
        2. George Graph comparison should be started (!important!)
        3. Understand how to link GUI and backend somehow.
        4. Make project to be independent from the hard-link drive locations
        5. Add libraries and installation instructions to be added to mvn repository
        

2018-08-12:
    Done:
        1.Added into  a Git repo

2018-08-07:
    Done:
        1. In order to not overcomplicate the logic, results are re-collected from the existing CSV
           files and processed. For instance, FRE is calculated in this way. For that some concept
           of Reducer was introduced to generalize the such task if they will be needed
           
    TODO:
        1. Items from the previous list.
        2. Some refactoring:
             - Make save and load CSV as something general. The same code are spread over the whole
               code base.
             - Remove repeated code reducers
        3. Make a "setup.bat" to start coding from zero.
        4. Put the sources in Git repo.
        
    Next:
        1. Implementing GUI in some form. Meanwhile the variants to start are JavaFX and React. Most
           of chances GUI will be in WEB form...

2018-07-10:
    1. First need to collect results and only then report them. Some of properties depent on total
       result. For instance, FRE should be normalized within total run.
    2. Add non implemented Elena's metrics 
    3. Small refatoring to move from "starter" package to relevant packages
    4. Implement George Graph comparisons
    5. Start writting GUI (WEB?)
    6. Add Filtering Tokens Processor into container within appropriate flags in JSON config.
